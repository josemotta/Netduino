using System;
using System.Net;
using System.Net.Sockets;
using System.Threading;
using Microsoft.SPOT;
using Microsoft.SPOT.Hardware;
using SecretLabs.NETMF.Hardware;
using SecretLabs.NETMF.Hardware.Netduino;

namespace IRTransmitter
{
    public class Program
    {
        public static void Main()
        {
            // write your code here
            const int analogInPin = A0;  

int sensorValue = 0;         

int KEY ;

int NEWKEY ;

int OLDKEY = 0;

int OK = 0 ; 

int FLAG = 0;

int coun = 0;

int coun1 = 0;

int look = 0;

 

int chk[16] = {0,100,260,385,482,530,587,630,660,688,714,735,753,769,784,800};// set array comparision value

 

//*******************************************************************************************

#include   

long irKeyCodes[16] = {

   0x00000000, 0x40BFF807, 0x40BF7887, 0xC03FC03F,       // correspond to  Keypad button '1', '2', '3','4'

  0xC03F40BF,0x40BF00FF, 0x00000000, 0x00000000,       //  correspond to  Keypad button  '5', '6', '7','8'

  0x00000000, 0x00000000, 0x00000000, 0x00000000,       //  correspond to  Keypad button  '9', '10', '11,'12'

  0x80FFC13E, 0x80FFE11E, 0x80FFD12E, 0x80FFF10E        //  correspond to  Keypad button  '13', '14', '15','16

};

IRsend irsend;

//*******************************************************************************************

 

void setup() {

  Serial.begin(9600); //Set Baud Rate:

}

 

 void loop() {

 

    sensorValue = analogRead(analogInPin);                        

   delay(15);

   aaa:    

     if (FLAG == 0)

      {

  if (chk[0]<=sensorValue && sensorValue

     {

      KEY = 1 ; 

     }

   else if (chk[1]<=sensorValue && sensorValue

     {

      KEY = 2 ;   

     }

   else if (chk[2]<=sensorValue && sensorValue

     {

      KEY = 3 ;        

     }

   else if (chk[3]<=sensorValue && sensorValue

     {

      KEY = 4 ;       

     }

   else if (chk[4]<=sensorValue && sensorValue

     {

      KEY = 5 ;    

     }

   else if (chk[5]<=sensorValue && sensorValue

     {

      KEY = 6 ;

     }

   else if (chk[6]<=sensorValue && sensorValue

     {

      KEY = 7 ; 

     }

   else if (chk[7]<=sensorValue && sensorValue

     {

      KEY = 8 ;  

     }

   else if (chk[8]<=sensorValue && sensorValue

     {

     KEY = 9 ;    

     }

   else if (chk[9]<=sensorValue && sensorValue

     {

      KEY = 10 ; 

     }

   else if (chk[10]<=sensorValue && sensorValue

     {

      KEY = 11 ;

     }

   else if (chk[11]<=sensorValue && sensorValue

     {

      KEY = 12 ;  

     }

   else if (chk[12]<=sensorValue && sensorValue

     {

      KEY = 13 ; 

     }

   else if (chk[13]<=sensorValue && sensorValue

     {

      KEY = 14 ; 

     }

   else if (chk[14]<=sensorValue && sensorValue

     {

      KEY = 15 ;   

     }

   else if (chk[15]

     {

      KEY = 16 ;  

     }

   else if (sensorValue>1000 )                               //

     {

      KEY =  0;   

     }     

    }

 

 

    NEWKEY = KEY;                  //save value of  KEY to  NEWKEY                   

      if ( NEWKEY == OLDKEY)       // if NEWKEY = = OLDKEY then OK + 1       

         {                                                                                                                                               

           OK++;                                                                 

         }                                                    

         else

         {

           OK = 0;                 // if not, then   OK=0         

         }

         OLDKEY = NEWKEY;

      if(OK>=5)                     // if OK =5  print the value 

           {

           Serial.print("KEY = ");    

           Serial.println(NEWKEY);

            Serial.println(sensorValue);

              Serial.print("look = ");    

           Serial.println(look);   

         if (NEWKEY !=0)

         {  

           switch(NEWKEY){

 

       case 1:

            FLAG =1;

             break;

       case 2:

             FLAG =1;

             break;

       case 3:

             FLAG =1;

             break;

       case 4:

               FLAG =1;

              break;

       case 5:

           FLAG =1;

              break;

       case 6:

              FLAG =1;

                break;

       case 7:

               FLAG =1;

                break;

       case 8:

               FLAG =1;

               break;

       case 9:

               FLAG =1;

               break;

       case 10:

               FLAG =1;

               break;

       case 11:

               FLAG =1;

               break;

        case 12: 

               FLAG =1;

               break;

        case 13:    

               FLAG =1;

               break;

        case 14:  

                FLAG =1;

                 break;

        case 15:

                FLAG =1;

                break;

 

        case 16:            

              FLAG =1;

              break;               

            }     

         }    

 

          if(NEWKEY>0)

                {            

                  coun1++;            

                }  

 

             if(coun1>5)

                {

                  coun1=0;

                  irsend.sendNEC(irKeyCodes[NEWKEY], 32);

                  look++;

                }  

 

          if (sensorValue>950)

          {

            coun++;

          }

          if(coun>1)

          { 

             FLAG =0;      

            coun = 0;

            goto aaa;

         }

    }

 }
            // until here
        }

    }
}
-------------
/* Control a Lutron Maestro light dimmer */
#define BIT_IS_SET(i, bits)  (1 << i & bits)

// LED connected to digital pin 13
const int LED_PIN = 13;
// Width of a pulse, in microseconds
const int PULSE_WIDTH = 2300;
// # of bytes per command
const int COMMAND_LENGTH = 4;    

const int UP[]     = {255, 136, 130, 34};
const int DOWN[]   = {255, 136, 130, 20};
const int ON[]     = {255, 136, 132, 184};
const int OFF[]    = {255, 136, 189, 18};
const int RECALL[] = {255, 136, 132, 183};

void setup()
{
  pinMode(LED_PIN, OUTPUT);
}

/* Modulate pin at 39 kHz for give number of microseconds */
void on(int pin, int time) {
  static const int period = 25;
  // found wait_time by measuring with oscilloscope
  static const int wait_time = 9;  

  for (time = time/period; time > 0; time--) {
    digitalWrite(pin, HIGH);
    delayMicroseconds(wait_time);
    digitalWrite(pin, LOW);
    delayMicroseconds(wait_time);
  }
}

/* Leave pin off for time (given in microseconds) */
void off(int pin, int time) {
  digitalWrite(pin, LOW);
  delayMicroseconds(time);
}

/* Send a byte over the IR LED */
void send_byte(int bits) {
  for (int i = 7; i >= 0; i--)
  {
    if (BIT_IS_SET(i, bits)) {
      on(LED_PIN, PULSE_WIDTH);
    } else {
      off(LED_PIN, PULSE_WIDTH);
    }
  }
}

/* Send a full command */
void command(const int bytes[]) {
  for (int i = 0; i < COMMAND_LENGTH; i++) {
    send_byte(bytes[i]);
  }
  off(LED_PIN, 4 * PULSE_WIDTH);
}

void loop()
{
  command(UP);
  delay(1000);
  command(DOWN);
  delay(1000);
}

-----------------

namespace Toolbox.NETMF.Hardware
{
    public class Program
    {
        /**
         * Maerklin remote commander codes:
         * light:   1.T.11000.1010000
         * btn 1:   1.T.11000.1010001
         * btn 2:   1.T.11000.1010010
         * btn 3:   1.T.11000.1010011
         * btn 4:   1.T.11000.1010100
         * btn -:   1.T.11000.0010001
         * btn +:   1.T.11000.0010000
         * dir:     1.T.11000.0001101
         **/
        private const int Address = 0x18;
 
        private const int SelectLight = 0x50;
        private const int SelectTrain1 = 0x51;
        private const int SelectTrain2 = 0x52;
        private const int SelectTrain3 = 0x53;
        private const int SelectTrain4 = 0x54;
 
        private const int SpeedDown = 0x11;
        private const int SpeedUp = 0x10;
 
        private const int Direction = 0x0D;
 
 
        public static void Main()
        {
            //create the infrared transmitter driver
            var irtx = new InfraredTransmitter(Pins.GPIO_PIN_D8);
 
            //create the codec to be used
            var codec = new InfraredCodecRC5(irtx);
            codec.ExtendedMode = true;
 
            //define the button for decrement speed
            var btn_dec = new InterruptPort(
                Pins.GPIO_PIN_D0,
                true,
                Port.ResistorMode.PullUp,
                Port.InterruptMode.InterruptEdgeLow
                );
 
            btn_dec.OnInterrupt += (a_, b_, dt_) =>
            {
                codec.Send(Address, SpeedDown);
            };
 
            //define the button for increment speed
            var btn_inc = new InterruptPort(
                Pins.GPIO_PIN_D1,
                true,
                Port.ResistorMode.PullUp,
                Port.InterruptMode.InterruptEdgeLow
                );
 
            btn_inc.OnInterrupt += (a_, b_, dt_) =>
            {
                codec.Send(Address, SpeedUp);
            };
 
            //define the button for the direction
            var btn_dir = new InterruptPort(
                Pins.GPIO_PIN_D2,
                true,
                Port.ResistorMode.PullUp,
                Port.InterruptMode.InterruptEdgeLow
                );
 
            btn_dir.OnInterrupt += (a_, b_, dt_) =>
            {
                codec.Send(Address, Direction);
            };
 
            Thread.Sleep(Timeout.Infinite);
        }
 
    }
}
