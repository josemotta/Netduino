<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Toolbox.NETMF.Hardware</name>
    </assembly>
    <members>
        <member name="T:Toolbox.NETMF.Hardware.SharpGP2Y0A02YK">
            <summary>
            Sharp Long Distance Measuring Sensor
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.SharpGP2Y0A02YK._Input">
            <summary>
            Contains a reference to the analog input port
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.SharpGP2Y0A02YK.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin)">
            <summary>
            Sharp Long Distance Measuring Sensor
            </summary>
            <param name="InputPort">Port the sensor is connected to</param>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.SharpGP2Y0A02YK.Distance">
            <summary>
            Sends back the distance in centimeters (IR sensors aren't as accurate as sonic though!)
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.InputPortShift">
            <summary>
            InputPort class for Bitshift-IC's
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.InputPortShift._Ic74HC165">
            <summary>
            Reference to the 74HC165 IC
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.InputPortShift._Pin">
            <summary>
            The used pin on the IC
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.InputPortShift.#ctor(Toolbox.NETMF.Hardware.Ic74HC165,Toolbox.NETMF.Hardware.Ic74HC165.Pins,System.Boolean,Microsoft.SPOT.Hardware.Port.ResistorMode)">
            <summary>
            Creates a new interrupt port. Requires Ic74HC165.EventsEnabled on true!
            </summary>
            <param name="Ic">A reference to the 74HC165 IC</param>
            <param name="Pin">The pin to which the interrupt port is connected</param>
            <param name="GlitchFilter">Not supported, so only False is an option (in here for compatibility reasons)</param>
            <param name="Resistor">Not supported, so only Disabled is an option (in here for compatibility reasons)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.InputPortShift.Dispose">
            <summary>
            Releases used resources
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.InputPortShift.Read">
            <summary>
            Returns the current pin state
            </summary>
            <returns>The pin state</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.InputPortShift.ClearInterrupt">
            <summary>Interrups won't work on InputPorts, therefore I throw an NotImplementedException, just like the built-in InputPorts does.</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.InputPortShift.DisableInterrupt">
            <summary>Interrups won't work on InputPorts, therefore I throw an NotImplementedException, just like the built-in InputPorts does.</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.InputPortShift.EnableInterrupt">
            <summary>Interrups won't work on InputPorts, therefore I throw an NotImplementedException, just like the built-in InputPorts does.</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.InputPortShift.Id">
            <summary>
            The Pin Id
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.InputPortShift.GlitchFilter">
            <summary>
            Gets a value that indicates whether the glitch filter is currently enabled. 
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.InputPortShift.Interrupt">
            <summary>
            Gets a value that indicates whether the glitch filter is currently enabled. 
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.InputPortShift.Resistor">
            <summary>
            Returns the current resistor mode
            </summary>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.InputPortShift.OnInterrupt">
            <summary>
            Adds or removes callback methods for interrupt changes
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Ic74HC595Chain">
             <summary>
             74HC595 IC Chain
             </summary>
             <remarks><![CDATA[
             74HC595 (N) DIP16 pin layout:
             
               16 15 14 13 12 11 10 9
               │  │  │  │  │  │  │  │
             █████████████████████████
             ▀████████████████████████
               ███████████████████████
             ▄████████████████████████
             █████████████████████████
               │  │  │  │  │  │  │  │
               1  2  3  4  5  6  7  8
             
             NOTE: The pins below aren't mentioned in pin sequence but grouped by connection
            
             15 Q0 (parallel data output) -> Ic74HC595.GPO_PIN_D0
              1 Q1 (parallel data output) -> Ic74HC595.GPO_PIN_D1
              2 Q2 (parallel data output) -> Ic74HC595.GPO_PIN_D2
              3 Q3 (parallel data output) -> Ic74HC595.GPO_PIN_D3
              4 Q4 (parallel data output) -> Ic74HC595.GPO_PIN_D4
              5 Q5 (parallel data output) -> Ic74HC595.GPO_PIN_D5
              6 Q6 (parallel data output) -> Ic74HC595.GPO_PIN_D6
              7 Q7 (parallel data output) -> Ic74HC595.GPO_PIN_D7
            
              8 GND (ground) -> Gnd
             13 OE (output enable, active low) -> Gnd
             10 MR (master reset, active low) -> +3.3V
             16 Vcc (positive supply voltage) -> +3.3V
            
             11 SCLK -> SPI SCLK (on Netduino pin 13)
             12 SS -> SPI SS (on Netduino any GPIO pin)
             14 MOSI -> SPI MOSI (on Netduino pin 11 or another Ic74HC595 pin 9)
            
              9 Q7’ (serial data output) -> an optional 74HC595 slave
             ]]></remarks>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC595Chain._SpiInterface">
            <summary>
            A reference to the SPI Interface
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC595Chain._IcCount">
            <summary>
            Contains the amount of connected IC's
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC595Chain._LastState">
            <summary>
            Contains the last state of all IC's
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC595Chain._BitBangMode">
            <summary>When using bitbang mode, this bool is true. <see cref="F:Toolbox.NETMF.Hardware.Ic74HC595Chain._SpiInterface"/> won't be used if this is true.</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC595Chain._BBM_SPCK">
            <summary>When using bitbang mode, this will contain a reference to the SPCK pin. See also <see cref="F:Toolbox.NETMF.Hardware.Ic74HC595Chain._BitBangMode"/></summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC595Chain._BBM_CS">
            <summary>When using bitbang mode, this will contain a reference to the CS pin. See also <see cref="F:Toolbox.NETMF.Hardware.Ic74HC595Chain._BitBangMode"/></summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC595Chain._BBM_MOSI">
            <summary>When using bitbang mode, this will contain a reference to the MOSI pin. See also <see cref="F:Toolbox.NETMF.Hardware.Ic74HC595Chain._BitBangMode"/></summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74HC595Chain.#ctor(Microsoft.SPOT.Hardware.SPI.SPI_module,Microsoft.SPOT.Hardware.Cpu.Pin,System.UInt32)">
            <summary>
            Initialises a chain of one or multiple 74HC595 IC's over managed SPI
            </summary>
            <param name="SPI_Module">The SPI interface it's connected to</param>
            <param name="LatchPin">The slave select pin connected to the IC</param>
            <param name="IcCount">The amount of IC's connected</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74HC595Chain.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,System.UInt32)">
            <summary>
            Initialises a chain of one or multiple 74HC595 IC's over bitbanged SPI [WHEN POSSIBLE, USE MANAGED MODE!]
            </summary>
            <remarks>
            Use only when the managed SPI-pins can't be used. This method is way slower and locks the pins for any other purpose until disposed.
            </remarks>
            <param name="ClockPin">The clock pin connected to the IC</param>
            <param name="DataPin">The data pin connected to the IC</param>
            <param name="LatchPin">The slave select pin connected to the IC</param>
            <param name="IcCount">The amount of IC's connected</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74HC595Chain.SetValue(System.UInt32,System.Byte)">
            <summary>
            Sets the value for a specific IC
            </summary>
            <param name="IcIndex">The IC index</param>
            <param name="Value">The new value</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74HC595Chain._WriteSPI">
            <summary>
            Writes all data to the SPI interface
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74HC595Chain.Dispose">
            <summary>
            Frees the pins used for bitbang mode, when used bitbang mode. Otherwise disposing isn't really required.
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Speaker">
            <summary>
            Simple Speaker interface
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Speaker._Speaker">
            <summary>
            Stores a reference to the PWM device of the speaker
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Speaker._Tonebar">
            <summary>
            Contains 84 periods from A to G# from octave 0 to 6
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Speaker._PlayLength">
            <summary>
            The length of each note (1 - 64). L1 is whole note, L2 is half note, etc.
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Speaker._PlayTempo">
            <summary>
            The tempo in quarter notes per minute (32 - 255).
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Speaker._PlayOctave">
            <summary>
            The octave the Play-method currently is in.
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Speaker._PlayMode">
            <summary>
            Holds the play mode the Play-method currently is in.
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Speaker.Play(System.String)">
            <summary>
            Plays musical notes. See also: http://netmftoolbox.codeplex.com/wikipage?title=Toolbox.NETMF.Hardware.Speaker
            </summary>
            <example><![CDATA[
            Octave and tone commands:
              Ooctave    Sets the current octave (0 - 6).
              < or >     Moves up or down one octave.
              A - G      Plays the specified note in the current octave.
              Nnote      Plays a specified note (0 - 84) in the seven octave
                         range (0 is a rest).
            
            Duration and tempo commands:
              Llength    Sets the length of each note (1 - 64). L1 is whole note,
                         L2 is half note, etc.
              ML         Sets music legato.
              MN         Sets music normal.
              MS         Sets music staccato.
              Ppause     Specifies a pause (1 - 64). P1 is a whole-note pause,
                         P2 is a half-note pause, etc.
              Ttempo     Sets the tempo in quarter notes per minute (32 - 255).
            
            Suffix commands:
              # or +     Turns preceding note into a sharp.
              -          Turns preceding note into a flat.
              .          Plays the preceding note 3/2 as long as specified.
            
            See also: http://netmftoolbox.codeplex.com/wikipage?title=Toolbox.NETMF.Hardware.Speaker
            ]]></example>
            <param name="CommandString">A string expression that contains one or more of the PLAY commands.</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Speaker._PlayNote(System.Byte,System.Byte,System.Byte)">
            <summary>
            Plays a note
            </summary>
            <param name="Note">The note (0 to 84)</param>
            <param name="Tempo">The tempo in quarter notes per minute (32 - 255).</param>
            <param name="Length">The length of each note (1 - 64). L1 is whole note, L2 is half note, etc.</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Speaker.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin)">
            <summary>
            Defines a speaker
            </summary>
            <param name="SpeakerPin">The pin the speaker is connected to (must be a PWM-pin)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Speaker.Sound(System.Single,System.Single)">
            <summary>
            Generates a sound through your speaker.
            </summary>
            <param name="Frequency">The frequency of the sound in hertz; a value in the range 37 through 32,767</param>
            <param name="Duration">The number of ticks the sound should last; a value in the range 0 through 65,535. There are 18.2 ticks per second.</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Speaker.Beep">
            <summary>
            Generates a beep sound from your speaker.
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Speaker._PlayModes">
            <summary>
            All existing play modes
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.MicroSerialServoController">
            <summary>
            Pololu Micro Serial Servo Controller
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MicroSerialServoController._Controller">
            <summary>
            Reference to the serial port
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MicroSerialServoController._Mode">
            <summary>
            Contains the current used mode
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MicroSerialServoController.#ctor(System.String,Toolbox.NETMF.Hardware.MicroSerialServoController.Modes)">
            <summary>
            Pololu Micro Serial Servo Controller
            </summary>
            <param name="Port">Serial port the controller is connected to</param>
            <param name="Mode">The mode the controller is in (when the Mode-jumper is placed on the board, it's MiniSSC2)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MicroSerialServoController.SetParameters(System.Byte,System.Boolean,System.Boolean,System.Byte)">
            <summary>
            Sets specific parameters for a servo (Pololu-mode only)
            </summary>
            <param name="MotorId">The number of the motor</param>
            <param name="On">Specifies whether the motor is on or not</param>
            <param name="Reversed">When true, it will move in reverse</param>
            <param name="Range">The range through which the servo moves (0 to 31)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MicroSerialServoController.SetSpeed(System.Byte,System.Byte)">
            <summary>
            Sets the speed at which the servo moves (Pololu-mode only)
            </summary>
            <param name="MotorId">The number of the motor</param>
            <param name="Speed">The speed of movement (1 to 127 or 0 to disable any delay)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MicroSerialServoController.SetPosition(System.Byte,System.Byte)">
            <summary>
            Changes the position of a motor (works in both modes)
            </summary>
            <param name="MotorId">The number of the motor</param>
            <param name="Position">The position the motor must go to (0 to 254)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MicroSerialServoController.SendCommand(System.Byte,System.Byte,System.Byte)">
            <summary>
            Sends a customized command (Pololu-mode only, see manual for commands)
            </summary>
            <param name="Command">Command ID</param>
            <param name="MotorId">Motor ID</param>
            <param name="Data1">Data byte 1</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MicroSerialServoController.SendCommand(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sends a customized command (Pololu-mode only, see manual for commands)
            </summary>
            <param name="Command">Command ID</param>
            <param name="MotorId">Motor ID</param>
            <param name="Data1">Data byte 1</param>
            <param name="Data2">Data byte 2</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MicroSerialServoController.SendCommand(System.Byte[])">
            <summary>
            Sends a customized command (Pololu-mode only, see manual for commands)
            </summary>
            <param name="WriteBuffer">A byte array with the command and it's parameters</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MicroSerialServoController.Dispose">
            <summary>
            Disposes this object
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.MicroSerialServoController.Modes">
            <summary>
            Different communication modes of the board
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MicroSerialServoController.Modes.MiniSSC2">
            <summary>MiniSSC2 communication mode (use this when a jumper is on the board)</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MicroSerialServoController.Modes.Pololu">
            <summary>Pololu communication mode (Recommended; use this when no jumper is on the board)</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.InterruptPortShift">
            <summary>
            InterruptPort class for Bitshift-IC's
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.InterruptPortShift._Ic74HC165">
            <summary>
            Reference to the 74HC165 IC
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.InterruptPortShift._Pin">
            <summary>
            The used pin on the IC
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.InterruptPortShift._InterruptsEnabled">
            <summary>
            True when interrupts are enabled
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.InterruptPortShift._Interrupt">
            <summary>
            Interrupt mode
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.InterruptPortShift.#ctor(Toolbox.NETMF.Hardware.Ic74HC165,Toolbox.NETMF.Hardware.Ic74HC165.Pins,System.Boolean,Microsoft.SPOT.Hardware.Port.ResistorMode,Microsoft.SPOT.Hardware.Port.InterruptMode)">
            <summary>
            Creates a new interrupt port. Requires Ic74HC165.EventsEnabled on true!
            </summary>
            <param name="Ic">A reference to the 74HC165 IC</param>
            <param name="Pin">The pin to which the interrupt port is connected</param>
            <param name="GlitchFilter">Not supported, so only False is an option (in here for compatibility reasons)</param>
            <param name="Resistor">Not supported, so only Disabled is an option (in here for compatibility reasons)</param>
            <param name="Interrupt">Defines when interrupts should be triggered (EdgeLevels not supported)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.InterruptPortShift.Ic_onPinChange(System.UInt32,System.UInt32,System.DateTime)">
            <summary>
            Triggered when a pin's value is changed
            </summary>
            <param name="PinId">The number of the pin</param>
            <param name="Value">The new value</param>
            <param name="Time">Time and date when the event is triggered</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.InterruptPortShift.ClearInterrupt">
            <summary>
            Clears the current interrupt on the interrupt port.
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.InterruptPortShift.DisableInterrupt">
            <summary>
            Disables the interrupt on this InterruptPort
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.InterruptPortShift.EnableInterrupt">
            <summary>
            Enables the interrupt on this InterruptPort
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.InterruptPortShift.Dispose">
            <summary>
            Releases used resources
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.InterruptPortShift.Read">
            <summary>
            Returns the current pin state
            </summary>
            <returns>The pin state</returns>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.InterruptPortShift.Id">
            <summary>
            The Pin Id
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.InterruptPortShift.GlitchFilter">
            <summary>
            Gets a value that indicates whether the glitch filter is currently enabled. 
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.InterruptPortShift.Interrupt">
            <summary>
            Gets a value that indicates whether the glitch filter is currently enabled. 
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.InterruptPortShift.Resistor">
            <summary>
            Returns the current resistor mode
            </summary>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.InterruptPortShift.OnInterrupt">
            <summary>
            Adds or removes callback methods for interrupt changes
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.OutputPortShift">
            <summary>
            OutputPort class for Bitshift-IC's
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.OutputPortShift._IcOut74HC595">
            <summary>
            A reference to the IC class
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.OutputPortShift._Pin">
            <summary>The pin used on the 74HC595 IC</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.OutputPortShift._InitialState">
            <summary>The initial state</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.OutputPortShift.#ctor(Toolbox.NETMF.Hardware.Ic74HC595,Toolbox.NETMF.Hardware.Ic74HC595.Pins,System.Boolean)">
            <summary>
            OutputPort on a 74HC595 Bitshifter IC
            </summary>
            <param name="IcOut">Reference to the 74HC595 IC</param>
            <param name="Pin">The output pin on the IC</param>
            <param name="InitialState">The initial state</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.OutputPortShift.Write(System.Boolean)">
            <summary>
            Changes the state of the current pin
            </summary>
            <param name="State">The new state</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.OutputPortShift.Read">
            <summary>
            Reads the state of the current pin
            </summary>
            <returns>The current state</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.OutputPortShift.DisableInterrupt">
            <summary>Interrups won't work on OutputPorts, therefore I throw an InvalidOperationException, just like the built-in OutputPort does.</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.OutputPortShift.EnableInterrupt">
            <summary>Interrups won't work on OutputPorts, therefore I throw an InvalidOperationException, just like the built-in OutputPort does.</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.OutputPortShift.Dispose">
            <summary>
            This class is actually just a wrapper for Ic74HC595, there is nothing to dispose
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.OutputPortShift.Id">
            <summary>
            Contains the pin used, read only
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.OutputPortShift.InitialState">
            <summary>
            Contains the initial state, read only
            </summary>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.OutputPortShift.OnInterrupt">
            <summary>
            Interrups won't work on OutputPorts, therefore I throw an InvalidOperationException, just like the built-in OutputPort does.
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Rdm630">
             <summary>
             Rdm630 RFID Reader
             </summary>
             <remarks><![CDATA[
             RDM630 pin layout:
             
               10 9  8           7  6
               │  │  │           │  │
             █████████████████████████
             █████████████████████████
             █████████████████████████
             █████████████████████████
               │  │  │  │  │         
               1  2  3  4  5         
            
              1 TX (Data out) -> Netduino pin 0 or 2 (COM1 or COM2)
              2 RX (Data in) -> Netduino pin 1 or 3 (COM1 or COM2), but since it's read-only, may be left empty
              3 Unused
              4 GND -> Netduino Gnd
              5 +5V(DC) -> Netduino +5V
              6 ANT1 -> Antenna (polarity doesn't matter)
              7 ANT2 -> Antenna (polarity doesn't matter)
              8 GND -> Netduino Gnd (but if pin 4 is already connected, this may be left empty)
              9 +5V(DC) -> Netduino +5V (but if pin 5 is already connected, this may be left empty)
             10 LED -> A led if you want to have a led signalling when there's a transfer
             ]]></remarks>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Rdm630._Serial">
            <summary>
            Contains a reference to the serial port the Rdm630 is connected to
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Rdm630._ReadBuffer">
            <summary>
            A read buffer of 14 bytes. Since every block of data has 14 bytes, this should be enough.
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Rdm630._ReadPosition">
            <summary>
            The current position on the _ReadBuffer
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Rdm630._SerialConversionTable">
            <summary>
            Table to convert integers from the serial bus to a hex digit quickly
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Rdm630._LastSuccessfullRead">
            <summary>
            Contains the last successfull RFID tag
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Rdm630.#ctor(System.String)">
            <summary>
            Rdm630 RFID Reader
            </summary>
            <param name="Port">The serial port the Rdm630 is connected to</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Rdm630._Serial_DataReceived(System.Object,System.IO.Ports.SerialDataReceivedEventArgs)">
            <summary>
            Triggers when there is new data on the serial port
            </summary>
            <param name="Sender">The sender of the event, which is the SerialPort object</param>
            <param name="EventData">A SerialDataReceivedEventArgs object that contains the event data</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Rdm630._Rdm630_DataReceived">
            <summary>
            Triggers when a full RFID tag is scanned
            </summary>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.Rdm630.DataReceived">
            <summary>
            Triggered when data has been received
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.Rdm630.Tag">
            <summary>
            The most recent scanned tag
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.ThumbJoystick">
            <summary>
            Analog thumb joystick
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.ThumbJoystick._Horizontal">
            <summary>Reference to the horizontal pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.ThumbJoystick._Vertical">
            <summary>Reference to the vertical pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.ThumbJoystick._Push">
            <summary>Reference to the push pin</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.ThumbJoystick.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,System.Boolean,System.Boolean)">
            <summary>
            Analog thumb joystick
            </summary>
            <param name="HorizontalPin">Analog pin for the horizontal bar</param>
            <param name="VerticalPin">Analog pin for the vertical bar</param>
            <param name="PushPin">Pin for the push button (optionally this class handles the push button)</param>
            <param name="InvertHorizontal">When true, the horizontal value will be inverted</param>
            <param name="InvertVertical">When true, the vertical value will be inverted</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.ThumbJoystick.Dispose">
            <summary>
            Disposes this object
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.ThumbJoystick.InvertHorizontal">
            <summary>When true, the horizontal value will be inverted</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.ThumbJoystick.InvertVertical">
            <summary>When true, the vertical value will be inverted</summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.ThumbJoystick.HorizontalValue">
            <summary>
            Returns the horizontal state (-50 to 50)
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.ThumbJoystick.VerticalValue">
            <summary>
            Returns the vertical state (-50 to 50)
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.ThumbJoystick.PushValue">
            <summary>
            Returns the pushed state (false or true)
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.RotaryDIPSwitch">
            <summary>
            A binary Rotary DIP Switch
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.RotaryDIPSwitch._Pins">
            <summary>
            Contains references to all pins
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.RotaryDIPSwitch._LastState">
            <summary>
            Contains the last state
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.RotaryDIPSwitch.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin[])">
            <summary>
            Defines a binary Rotary DIP Switch
            </summary>
            <param name="Pins">An array with the pins for each bit</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.RotaryDIPSwitch.RotaryDIPSwitch_OnInterrupt(System.UInt32,System.UInt32,System.DateTime)">
            <summary>
            Interrupt triggered when a pin changes state
            </summary>
            <param name="Pin">The pin id that's changed</param>
            <param name="State">The new state</param>
            <param name="Time">Time of the event</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.RotaryDIPSwitch.Read">
            <summary>
            Returns the current state of the switch
            </summary>
            <returns>It's current state</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.RotaryDIPSwitch._Read">
            <summary>
            Reads the value of the switch
            </summary>
            <returns>The value of the switch</returns>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.RotaryDIPSwitch.OnInterrupt">
            <summary>
            Event triggered when the state changes
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.BitBangBuzzer">
            <summary>
            Bitbang Buzzer class for if a buzzer isn't conneced to a PWM-pin
            </summary>
            <remarks>
            Sometimes you want to add a buzzer, but all PWM-pins are already taken. This class comes to rescue!
            </remarks>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.BitBangBuzzer._State">
            <summary>
            Contains the current state of the buzzer
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.BitBangBuzzer._OutputPin">
            <summary>
            Contains the pin
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.BitBangBuzzer._PinSwitcherThread">
            <summary>
            Reference to the seperate buzzer thread
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.BitBangBuzzer.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,System.Boolean)">
            <summary>
            Bit Bang Buzzer
            </summary>
            <remarks>
            Sometimes you want to add a buzzer, but all PWM-pins are already taken. This class comes to rescue!
            </remarks>
            <param name="PortId">The pin the buzzer is connected to (on Netduino: Pins.GPIO_PIN_D3)</param>
            <param name="InitialState">The buzzers initial state</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.BitBangBuzzer._PinSwitcherLoop">
            <summary>
            Switches the pin values if needed
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.BitBangBuzzer.Write(System.Boolean)">
            <summary>
            Writes the state of the buzzer
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.BitBangBuzzer.Read">
            <summary>
            Reads the state of the buzzer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.BitBangBuzzer.Dispose">
            <summary>
            Disposes the buzzer object
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.BitBangBuzzer.Interval">
            <summary>
            Interval of the speaker in ms
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.WearableKeypad">
            <summary>
            Driver for Sparkfun's Wearable Keypad
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.WearableKeypad._Pin1">
            <summary>Reference to pin P5.1</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.WearableKeypad._Pin2">
            <summary>Reference to pin P5.2</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.WearableKeypad._Pin3">
            <summary>Reference to pin P5.3</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.WearableKeypad.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin)">
            <summary>
            Initializes the driver for Sparkfun's Wearable Keypad
            </summary>
            <param name="Pin1">Pin P5.1 from the keypad</param>
            <param name="Pin2">Pin P5.2 from the keypad</param>
            <param name="Pin3">Pin P5.3 from the keypad</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.WearableKeypad.Read">
            <summary>
            Reads the current value
            </summary>
            <returns>The value of the keypad (0=up, 1=right, 2=down, 3=left, 4=center) or -1 when nothing is pressed</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.WearableKeypad.Dispose">
            <summary>
            Disposes this object and frees the pins
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.SN754410">
             <summary>
             SN754410-compatible H-Bridge Motor Driver
             </summary>
             <remarks><![CDATA[
             SN754410 DIP16 pin layout:
             
               16 15 14 13 12 11 10 9
               │  │  │  │  │  │  │  │
             █████████████████████████
             ▀████████████████████████
               ███████████████████████
             ▄████████████████████████
             █████████████████████████
               │  │  │  │  │  │  │  │
               1  2  3  4  5  6  7  8
             
             NOTE: The pins below aren't mentioned in pin sequence but grouped by connection
            
              3 1Y -> Motor 1 negative wire
              6 2Y -> Motor 1 positive wire
             11 1Y -> Motor 2 positive wire
             14 2Y -> Motor 3 negative wire
            
              2 1A (Motor 1 direction pin) -> Any GPIO on the Netduino, ex. pin 7
              7 2A (Motor 1 speed pin) -> Any PWM pin on the Netduino, ex. pin 6
             10 3A (Motor 2 direction pin) -> Any GPIO on the Netduino, ex. pin 4
             15 4A (Motor 2 speed pin) -> Any PWM pin on the Netduino, ex. pin 5
            
              8 Vcc2 -> Power source for the motors, ex. Vin on the Netduino
            
              4 Heatsink and ground -> Ground
              5 Heatsink and ground -> Ground
             12 Heatsink and ground -> Ground
             13 Heatsink and ground -> Ground
            
              1 1,2EN -> +5V
              9 3,4EN -> +5V
             16 Vcc1 -> +5V
             ]]></remarks>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.SN754410._Motor2Speed">
            <summary>Reference to the speed-pin of motor 2</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.SN754410._Motor1Speed">
            <summary>Reference to the speed-pin of motor 1</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.SN754410._Motor2Direction">
            <summary>Reference to the direction-pin of motor 2</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.SN754410._Motor1Direction">
            <summary>Reference to the direction-pin of motor 1</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.SN754410.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin)">
            <summary>
            H-Bridge-compatible Motor Driver (as used on the DFRobot Motorshield)
            </summary>
            <param name="Speed1">Motor 1 PWM control</param>
            <param name="Direction1">Motor 1 Direction control</param>
            <param name="Speed2">Motor 2 PWM control</param>
            <param name="Direction2">Motor 2 Direction control</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.SN754410.SetState(Toolbox.NETMF.Hardware.SN754410.Motors,System.SByte)">
            <summary>
            Sets the state of a motor
            </summary>
            <param name="Motor">The motor to change</param>
            <param name="Speed">The speed to move with; -100 (full speed backward) to 100 (full speed forward)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.SN754410.Dispose">
            <summary>
            Stops both motors and disposes this class
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.SN754410.Motors">
            <summary>
            Contains all motors
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.SN754410.Motors.Motor1">
            <summary>First motor</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.SN754410.Motors.Motor2">
            <summary>Second motor</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Ic74HC165Chain">
             <summary>
             74HC165 IC Chain
             </summary>
             <remarks><![CDATA[
             74HC165 (N) DIP16 pin layout:
             
               16 15 14 13 12 11 10 9
               │  │  │  │  │  │  │  │
             █████████████████████████
             ▀████████████████████████
               ███████████████████████
             ▄████████████████████████
             █████████████████████████
               │  │  │  │  │  │  │  │
               1  2  3  4  5  6  7  8
             
             NOTE: The pins below aren't mentioned in pin sequence but grouped by connection
            
             11 D0 (parallel data input) -> Ic74HC164.GPI_PIN_D0
             12 D1 (parallel data input) -> Ic74HC164.GPI_PIN_D1
             13 D2 (parallel data input) -> Ic74HC164.GPI_PIN_D2
             14 D3 (parallel data input) -> Ic74HC164.GPI_PIN_D3
              3 D4 (parallel data input) -> Ic74HC164.GPI_PIN_D4
              4 D5 (parallel data input) -> Ic74HC164.GPI_PIN_D5
              5 D6 (parallel data input) -> Ic74HC164.GPI_PIN_D6
              6 D7 (parallel data input) -> Ic74HC164.GPI_PIN_D7
            
              8 GND (ground) -> Gnd
             15 CE -> Gnd
             16 Vcc (positive supply voltage) -> +3.3V
            
              2 SCLK -> SPI SCLK (on Netduino pin 13)
              1 PL -> SPI CS (on Netduino any GPIO pin)
              9 MISO -> SPI MISO (on Netduino pin 12 or another Ic74HC165 pin 10)
            
             10 DS (serial data output) -> an optional 74HC165 slave
             ]]></remarks>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC165Chain._SpiInterface">
            <summary>
            A reference to the SPI Interface
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC165Chain._IcCount">
            <summary>
            Contains the amount of connected IC's
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC165Chain._LastState">
            <summary>
            Contains the last state of all IC's
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC165Chain._InterruptStarter">
            <summary>
            Contains a reference to the interrupt thread
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC165Chain._BitBangMode">
            <summary>When using bitbang mode, this bool is true. <see cref="F:Toolbox.NETMF.Hardware.Ic74HC165Chain._SpiInterface"/> won't be used if this is true.</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC165Chain._BBM_SPCK">
            <summary>When using bitbang mode, this will contain a reference to the SPCK pin. See also <see cref="F:Toolbox.NETMF.Hardware.Ic74HC165Chain._BitBangMode"/></summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC165Chain._BBM_CS">
            <summary>When using bitbang mode, this will contain a reference to the CS pin. See also <see cref="F:Toolbox.NETMF.Hardware.Ic74HC165Chain._BitBangMode"/></summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC165Chain._BBM_MISO">
            <summary>When using bitbang mode, this will contain a reference to the MISO pin. See also <see cref="F:Toolbox.NETMF.Hardware.Ic74HC165Chain._BitBangMode"/></summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74HC165Chain.#ctor(Microsoft.SPOT.Hardware.SPI.SPI_module,Microsoft.SPOT.Hardware.Cpu.Pin,System.UInt32)">
            <summary>
            Initialises a chain of one or multiple 74HC165 IC's
            </summary>
            <param name="SPI_Module">The SPI interface it's connected to</param>
            <param name="LatchPin">The slave select pin connected to the IC</param>
            <param name="IcCount">The amount of IC's connected</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74HC165Chain.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,System.UInt32)">
            <summary>
            Initialises a chain of one or multiple 74HC165 IC's over bitbanged SPI [WHEN POSSIBLE, USE MANAGED MODE!]
            </summary>
            <remarks>
            Use only when the managed SPI-pins can't be used. This method is way slower and locks the pins for any other purpose until disposed.
            </remarks>
            <param name="ClockPin">The clock pin connected to the IC</param>
            <param name="DataPin">The data pin connected to the IC</param>
            <param name="LatchPin">The slave select pin connected to the IC</param>
            <param name="IcCount">The amount of IC's connected</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74HC165Chain._InterruptLoop">
            <summary>
            Background thread checking for data changes
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74HC165Chain.GetValue(System.UInt32)">
            <summary>
            Returns the data from a specific IC
            </summary>
            <param name="IcIndex">The IC index</param>
            <returns></returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74HC165Chain._ReadSPI">
            <summary>
            Reads all data from the SPI interface
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.Ic74HC165Chain.EventsEnabled">
            <summary>
            When true, this.onByteChange works. When false, it doesn't. Default value: True
            </summary>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.Ic74HC165Chain.onByteChange">
            <summary>Triggered when data changed (requires this.EventsEnabled on true)</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.AutoRepeatInputPort">
            <summary>
            Represent an extension over an input port, with embedded auto-repeat capabilities.
            This kind of class is well suited for pushbuttons input managements
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AutoRepeatInputPort.QuantumDuration">
            <summary>
            Indicates the duration of the quantum for the input port sampling,
            and all the related calculations
            </summary>
            <remarks>It is recommended to leave this value as is</remarks>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AutoRepeatInputPort.DefaultInitialDelay">
            <summary>
            The initial delay used as default.
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AutoRepeatInputPort.DefaultAutoRepeatPeriod">
            <summary>
            The auto-repeat period used as default
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.AutoRepeatInputPort.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Port.ResistorMode,System.Boolean)">
            <summary>
            Create and open an instance of an input port,
            with embedded auto-repeat capabilities
            </summary>
            <param name="port">The I/O pin selected for the input</param>
            <param name="resistor">The resistor wired-logic easing</param>
            <param name="activeLevel">The level on which the input has to be considered active</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.AutoRepeatInputPort.Worker">
            <summary>
            the working thread handler, as the manager of the auto-repeat
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.AutoRepeatInputPort.ActiveLevel">
            <summary>
            Gets the active level defined for this instance
            </summary>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.AutoRepeatInputPort.InitialDelay">
            <summary>
            Get/set the initial delay before the auto-repeat starts. 
            The value is expressed in milliseconds, and is rounded accordingly to the quantum
            </summary>
            <remarks>
            The minimum allowed value is zero, that is an immediate starting of the auto-repeat
            </remarks>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.AutoRepeatInputPort.AutoRepeatPeriod">
            <summary>
            Get/set the interval period of the auto-repeat.
            The value is expressed in milliseconds, and is rounded accordingly to the quantum
            </summary>
            <remarks>
            The minimum value is equal to the quantum (i.e. 100ms)
            </remarks>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.AutoRepeatInputPort.StateChanged">
            <summary>
            Notify any change occurring in the auto-repeat life-cycle
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.AutoRepeatInputPort.AutoRepeatState">
            <summary>
            Enumeration of the possible states issued by the <see cref="E:Toolbox.NETMF.Hardware.AutoRepeatInputPort.StateChanged"/> event
            </summary>
            <remarks>
            Each state is better depicted considering a pushbutton acting on the input port
            </remarks>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AutoRepeatInputPort.AutoRepeatState.Press">
            <summary>
            The button has just been pressed. This state is always issued, but once only
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AutoRepeatInputPort.AutoRepeatState.Tick">
            <summary>
            The button has been hold down enough to begin the auto-repeat cycle.
            This state can be issued periodically
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.AutoRepeatInputPort.AutoRepeatState.Release">
            <summary>
            The button has just been depressed. This state is always issued, but once only
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.AutoRepeatEventHandler">
            <summary>
            The delegate behind the <see cref="E:Toolbox.NETMF.Hardware.AutoRepeatInputPort.StateChanged"/> event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.AutoRepeatEventArgs">
            <summary>
            Extension wrapper to the standard <see cref="T:Microsoft.SPOT.EventArgs"/> object, thus the state of the auto-repeat may be carried out to the host
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Bitshift7Segment">
            <summary>
            A 7-segment display over a bitshift IC
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Bitshift7Segment._Values">
            <summary>
            Contains an array of bytes; to light the leds specific bytes need to be true. Can be changed with <see cref="M:Toolbox.NETMF.Hardware.Bitshift7Segment.ChangeSignal(System.Byte,System.Byte)"/> and <see cref="M:Toolbox.NETMF.Hardware.Bitshift7Segment.ChangeSignals(System.Byte[])"/>
            </summary>
            <remarks><![CDATA[
            At default, these bytes are used:
               LowerLeft = 0
               Bottom = 1
               LowerRight = 2
               UpperRight = 4
               Top = 5
               UpperLeft = 6
               Middle = 7
               (Dot = 3)
            ]]></remarks>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Bitshift7Segment._DotBit">
            <summary>Reference to the bit which contains the dot (4th bit by default)</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Bitshift7Segment._Chain">
            <summary>Reference to the IC Chain</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Bitshift7Segment._IcIndex">
            <summary>Index of the IC connected to the 7-segment</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Bitshift7Segment._Digit">
            <summary>Contains the current displayed nummeric value</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Bitshift7Segment._Dot">
            <summary>Contains the current state of the dot</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Bitshift7Segment.ChangeSignal(System.Byte,System.Byte)">
            <summary>
            Changes the byte that needs to be sent to display a character (useful to customize characters)
            </summary>
            <param name="Index">The character to change (0 to 9 are actually 0 to 9 and 10 is blank, 11 to 255 are unused by default)</param>
            <param name="Signal">The byte of data that needs to be sent to the SPI bus for this character</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Bitshift7Segment.ChangeSignals(System.Byte[])">
            <summary>
            Changes all characters (also removes custom-made characters created with <see cref="M:Toolbox.NETMF.Hardware.Bitshift7Segment.ChangeSignal(System.Byte,System.Byte)"/>)
            </summary>
            <param name="Signals">A new array of index versus signal</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Bitshift7Segment.ChangeDotSignal(System.Byte)">
            <summary>
            Changes the bit used for the dot (by default: 4)
            </summary>
            <param name="Bit">The bit in which the dot is (1 to 8)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Bitshift7Segment.#ctor(Toolbox.NETMF.Hardware.Ic74HC595Chain,System.UInt32,System.Boolean)">
            <summary>
            Initalises a 7-segment display as part of a chain of 74HC595 IC's
            </summary>
            <param name="Chain">Reference to a 74HC595 chain</param>
            <param name="IcIndex">The index of the IC (start counting at 0!)</param>
            <param name="CommonAnode">Specifies if the 7-segment is common anode</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Bitshift7Segment.#ctor(Microsoft.SPOT.Hardware.SPI.SPI_module,Microsoft.SPOT.Hardware.Cpu.Pin,System.Boolean)">
            <summary>
            Initalises a 7-segment display connected with a single 74HC595 IC
            </summary>
            <param name="SPI_Module">The SPI interface it's connected to</param>
            <param name="LatchPin">The slave select pin connected to the IC</param>
            <param name="CommonAnode">Specifies if the 7-segment is common anode</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Bitshift7Segment.SetDigit(System.Byte)">
            <summary>
            Sets the digit to a specific number
            </summary>
            <param name="Digit">The number (0 to 9, 10 for blank)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Bitshift7Segment.GetDigit">
            <summary>
            Gets the current displayed digit
            </summary>
            <returns>The displayed number (0 to 9, 10 for blank)</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Bitshift7Segment.SetDot(System.Boolean)">
            <summary>
            Sets or unsets the dot
            </summary>
            <param name="State">True when the dot must be on</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Bitshift7Segment.GetDot">
            <summary>
            Gets the current state of the dot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Bitshift7Segment._Write">
            <summary>
            Writes the byte to the 74HC595 IC
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.RgbLed">
            <summary>
            Common RGB-led
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.RgbLed._Red">
            <summary>Reference to the red pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.RgbLed._Green">
            <summary>Reference to the green pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.RgbLed._Blue">
            <summary>Reference to the blue pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.RgbLed._CommonAnode">
            <summary>True when it's common anode, false if it's common cathode</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.RgbLed.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,System.Boolean)">
            <summary>
            Common RGB-led
            </summary>
            <param name="RedPin">The PWM-pin connected to Red</param>
            <param name="GreenPin">The PWM-pin connected to Green</param>
            <param name="BluePin">The PWM-pin connected to Blue</param>
            <param name="CommonAnode">Specifies if the led is common anode</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.RgbLed.Write(System.Int32)">
            <summary>
            Sets the value of the RGB led
            </summary>
            <param name="Value">The RGB value (0x000000 to 0xffffff)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.RgbLed.Write(System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the value of the RGB led
            </summary>
            <param name="Red">Red strength (0 to 255)</param>
            <param name="Green">Green strength (0 to 255)</param>
            <param name="Blue">Blue strength (0 to 255)</param>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.MatrixKeyPad">
            <summary>Generic KeyPad driver</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MatrixKeyPad._ColPins">
            <summary>A collection of all column pins</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MatrixKeyPad._RowPins">
            <summary>A collection of all row pins</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MatrixKeyPad._ColPinIds">
            <summary>A collection of all column pin IDs</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MatrixKeyPad._CheckState">
            <summary>Contains the current state</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MatrixKeyPad._LastKeyPress">
            <summary>Stores the last key press</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MatrixKeyPad.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin[],Microsoft.SPOT.Hardware.Cpu.Pin[])">
            <summary>Generic KeyPad driver</summary>
            <param name="RowPins">The pins bound to rows on the keypad matrix</param>
            <param name="ColPins">The pins bound to columns on the keypad matrix</param>
            <remarks>See also: http://netmftoolbox.codeplex.com/wikipage?title=Toolbox.NETMF.Hardware.MatrixKeyPad </remarks>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MatrixKeyPad.MatrixKeyPad_OnInterrupt(System.UInt32,System.UInt32,System.DateTime)">
            <summary>
            Event triggered when a button is pressed or released
            </summary>
            <param name="ColPinId">The Column Pin in which a key is pressed</param>
            <param name="State">The state of the button (0 = pressed, 1 = released)</param>
            <param name="time">Time of the event</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MatrixKeyPad.ActivateRowPorts(System.Boolean)">
            <summary>Switches all Row ports activity</summary>
            <param name="Active">True when they must be active, false otherwise</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MatrixKeyPad.ActivateColInterrupts(System.Boolean)">
            <summary>Disables or enables all interrupt events</summary>
            <param name="Active">When true, all events will be enabled, oftherwise disabled</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MatrixKeyPad.Read">
            <summary>Reads the KeyPad and returns the currently pressed scan code</summary>
            <returns>The key code or -1 when nothing is pressed</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MatrixKeyPad.Dispose">
            <summary>
            Disposes this object and frees the pins
            </summary>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.MatrixKeyPad.OnKeyDown">
            <summary>When a button is pushed, this event will be triggered</summary>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.MatrixKeyPad.OnKeyUp">
            <summary>When a button is released, this event will be triggered</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.MatrixKeyPad.CheckStates">
            <summary>We have a few states in which we do different checks</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MatrixKeyPad.CheckStates.WaitingForSignal">
            <summary>Waiting for a key press</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MatrixKeyPad.CheckStates.RowCheck">
            <summary>Searching the row</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MatrixKeyPad.CheckStates.WaitingForRelease">
            <summary>Waiting for a key release</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MatrixKeyPad.CheckStates.WaitingForMultipleRelease">
            <summary>Multiple buttons are pressed, waiting for a release</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Tmp36">
            <summary>
            TMP36 Temperature Sensor
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Tmp36._AnalogPort">
            <summary>
            Reference to the analog input
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Tmp36.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin)">
            <summary>
            TMP 36GZ Temperature Sensor
            </summary>
            <param name="AnalogPort">The port the sensor is connected to</param>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.Tmp36.Temperature">
            <summary>
            Returns the current temperature in Celcius
            </summary>
            <example>
            To read others then Celcius, try this:
            <code><![CDATA[
            float celcius = [this].Temperature;
            float kelvin = (float)(celcius + 273.15);
            float fahrenheit = (float)((celcius * 1.8) + 32.0);
            ]]></code>
            </example>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Ic74HC595">
            <summary>
            74HC595 8-Bit Ser-In/Ser Or Par-Out Shift Register with Out Latches (3-State)
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC595._Chain">
            <summary>
            Reference to the Ic74HC595Chain object
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC595._IcIndex">
            <summary>
            The index of this IC on the chain
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC595._PinState">
            <summary>
            Contains boolean states of all pins
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74HC595.#ctor(Toolbox.NETMF.Hardware.Ic74HC595Chain,System.UInt32)">
            <summary>
            Defines a specific 74HC595 IC in a chain
            </summary>
            <param name="Chain">Reference to the chain</param>
            <param name="IcIndex">The index of the IC (start counting at 0!)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74HC595.#ctor(Microsoft.SPOT.Hardware.SPI.SPI_module,Microsoft.SPOT.Hardware.Cpu.Pin)">
            <summary>
            Defines a single 74HC595
            </summary>
            <param name="SPI_Module">The SPI interface it's connected to</param>
            <param name="LatchPin">The slave select pin connected to the IC</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74HC595.SetPinState(Toolbox.NETMF.Hardware.Ic74HC595.Pins,System.Boolean)">
            <summary>
            Sets the state of a specific pin
            </summary>
            <param name="Pin">The pin</param>
            <param name="State">The new state of the pin</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74HC595.GetPinState(Toolbox.NETMF.Hardware.Ic74HC595.Pins)">
            <summary>
            Gets the current state of a specific pin
            </summary>
            <param name="Pin">The pin</param>
            <returns>The current state of the pin</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74HC595._WritePins">
            <summary>
            Writes all data to the IC
            </summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Ic74HC595.Pins">
            <summary>
            A list of all General Purpose Output pins
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC595.Pins.GPO_PIN_D0">
            <summary>1st GPO pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC595.Pins.GPO_PIN_D1">
            <summary>2nd GPO pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC595.Pins.GPO_PIN_D2">
            <summary>3rd GPO pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC595.Pins.GPO_PIN_D3">
            <summary>4th GPO pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC595.Pins.GPO_PIN_D4">
            <summary>5th GPO pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC595.Pins.GPO_PIN_D5">
            <summary>6th GPO pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC595.Pins.GPO_PIN_D6">
            <summary>7th GPO pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC595.Pins.GPO_PIN_D7">
            <summary>8th GPO pin</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Ic74HC165">
            <summary>
            74HC165 8-bit parallel-in/serial out shift register
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC165._Chain">
            <summary>
            Reference to the Ic74HC165Chain object
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC165._IcIndex">
            <summary>
            The index of this IC on the chain
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC165._PinState">
            <summary>
            Contains boolean states of all pins
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74HC165.#ctor(Toolbox.NETMF.Hardware.Ic74HC165Chain,System.UInt32)">
            <summary>
            Defines a specific 74HC165 IC in a chain
            </summary>
            <param name="Chain">Reference to the chain</param>
            <param name="IcIndex">The index of the IC (start counting at 0!)</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74HC165.#ctor(Microsoft.SPOT.Hardware.SPI.SPI_module,Microsoft.SPOT.Hardware.Cpu.Pin)">
            <summary>
            Defines a single 74HC165 IC
            </summary>
            <param name="SPI_Module">The SPI interface it's connected to</param>
            <param name="LatchPin">The slave select pin connected to the IC</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74HC165.GetPinState(Toolbox.NETMF.Hardware.Ic74HC165.Pins)">
            <summary>
            Gets the current state of a specific pin
            </summary>
            <param name="Pin">The pin</param>
            <returns>The current state of the pin</returns>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74HC165._ByteRead">
            <summary>
            Reads the IC's byte and convert it to pins
            </summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.Ic74HC165._Chain_onByteChange(System.UInt32,System.UInt32,System.DateTime)">
            <summary>
            A byte on the IC chain is changed
            </summary>
            <param name="IcIndex">The IC index of the change</param>
            <param name="IncomingByte">The new byte</param>
            <param name="time">Date and time on which the event occured</param>
        </member>
        <member name="P:Toolbox.NETMF.Hardware.Ic74HC165.EventsEnabled">
            <summary>
            When true, this.onPinChange works. When false, it doesn't. Default value: True.<br />
            Keep in mind, this.EventsEnabled is linked to Ic74HC165Chain.EventsEnabled, therefore linked to all IC's in the chain.
            </summary>
        </member>
        <member name="E:Toolbox.NETMF.Hardware.Ic74HC165.onPinChange">
            <summary>Triggered when a pin's value changed (requires this.EventsEnabled on true)</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.Ic74HC165.Pins">
            <summary>
            A list of all General Purpose Input pins
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC165.Pins.GPI_PIN_D0">
            <summary>1st GPI pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC165.Pins.GPI_PIN_D1">
            <summary>2nd GPI pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC165.Pins.GPI_PIN_D2">
            <summary>3rd GPI pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC165.Pins.GPI_PIN_D3">
            <summary>4th GPI pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC165.Pins.GPI_PIN_D4">
            <summary>5th GPI pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC165.Pins.GPI_PIN_D5">
            <summary>6th GPI pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC165.Pins.GPI_PIN_D6">
            <summary>7th GPI pin</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.Ic74HC165.Pins.GPI_PIN_D7">
            <summary>8th GPI pin</summary>
        </member>
        <member name="T:Toolbox.NETMF.Hardware.MultiSPI">
            <summary>
            SPI Helper to make it easier to use multiple SPI-devices on one SPI-bus
            </summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MultiSPI._SPIDevice">
            <summary>Reference to the SPI Device. All MultiSPI devices use the same SPI class from the NETMF, so this reference is static</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MultiSPI._Configuration">
            <summary>SPI Configuration. Different for each device, so not a static reference</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MultiSPI._Use_SoftwareCS">
            <summary>There is a software ChipSelect feature because of a bug. True when enabled</summary>
            <remarks>see http://netduino.codeplex.com/workitem/3 for more details about the bug.</remarks>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MultiSPI._SoftwareCS">
            <summary>Reference to the latch-pin when using software chip-select</summary>
        </member>
        <member name="F:Toolbox.NETMF.Hardware.MultiSPI._SoftwareCS_ActiveState">
            <summary>Active state when using software chip-select</summary>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiSPI.#ctor(Microsoft.SPOT.Hardware.SPI.Configuration)">
            <summary>
            Initializes a new SPI device
            </summary>
            <param name="config">The SPI-module configuration</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiSPI.Write(System.Byte[])">
            <summary>
            The 8-bit bytes to write to the SPI-buffer
            </summary>
            <param name="WriteBuffer">An array of 8-bit bytes</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiSPI.Write(System.UInt16[])">
            <summary>
            The 16-bit bytes to write to the SPI-buffer
            </summary>
            <param name="WriteBuffer">An array of 16-bit bytes</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiSPI.Read(System.Byte[])">
            <summary>
            Reads 8-bit bytes
            </summary>
            <param name="ReadBuffer">An array with 8-bit bytes to read</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiSPI.Read(System.UInt16[])">
            <summary>
            Reads 16-bit bytes
            </summary>
            <param name="ReadBuffer">An array with 16-bit bytes to read</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiSPI.WriteRead(System.Byte[],System.Byte[])">
            <summary>
            Writes an array of 8-bit bytes to the interface, and reads an array of 8-bit bytes from the interface.
            </summary>
            <param name="WriteBuffer">An array with 8-bit bytes to write</param>
            <param name="ReadBuffer">An array with 8-bit bytes to read</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiSPI.WriteRead(System.UInt16[],System.UInt16[])">
            <summary>
            Writes an array of 16-bit bytes to the interface, and reads an array of 16-bit bytes from the interface.
            </summary>
            <param name="WriteBuffer">An array with 16-bit bytes to write</param>
            <param name="ReadBuffer">An array with 16-bit bytes to read</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiSPI.WriteRead(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Writes an array of 8-bit bytes to the interface, and reads an array of 8-bit bytes from the interface into a specified location in the read buffer.
            </summary>
            <param name="WriteBuffer">An array with 8-bit bytes to write</param>
            <param name="ReadBuffer">An array with 8-bit bytes to read</param>
            <param name="StartReadOffset">The offset in time, measured in transacted elements from writeBuffer, when to start reading back data into readBuffer</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiSPI.WriteRead(System.UInt16[],System.UInt16[],System.Int32)">
            <summary>
            Writes an array of 16-bit bytes to the interface, and reads an array of 16-bit bytes from the interface into a specified location in the read buffer.
            </summary>
            <param name="WriteBuffer">An array with 16-bit bytes to write</param>
            <param name="ReadBuffer">An array with 16-bit bytes to read</param>
            <param name="StartReadOffset">The offset in time, measured in transacted elements from writeBuffer, when to start reading back data into readBuffer</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiSPI.WriteRead(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes an array of 16-bit bytes to the interface, and reads an array of 16-bit bytes from the interface into a specified location in the read buffer. 
            </summary>
            <param name="WriteBuffer">An array with 8-bit bytes to write</param>
            <param name="ReadBuffer">An array with 8-bit bytes to read</param>
            <param name="WriteOffset">The offset in writeBuffer to start write data from</param>
            <param name="WriteCount">The number of elements in writeBuffer to write</param>
            <param name="ReadOffset">The offset in readBuffer to start read data from</param>
            <param name="ReadCount">The number of elements in readBuffer to fill</param>
            <param name="StartReadOffset">The offset in time, measured in transacted elements from writeBuffer, when to start reading back data into readBuffer</param>
        </member>
        <member name="M:Toolbox.NETMF.Hardware.MultiSPI.WriteRead(System.UInt16[],System.Int32,System.Int32,System.UInt16[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes an array of 16-bit bytes to the interface, and reads an array of 16-bit bytes from the interface into a specified location in the read buffer. 
            </summary>
            <param name="WriteBuffer">An array with 16-bit bytes to write</param>
            <param name="ReadBuffer">An array with 16-bit bytes to read</param>
            <param name="WriteOffset">The offset in writeBuffer to start write data from</param>
            <param name="WriteCount">The number of elements in writeBuffer to write</param>
            <param name="ReadOffset">The offset in readBuffer to start read data from</param>
            <param name="ReadCount">The number of elements in readBuffer to fill</param>
            <param name="StartReadOffset">The offset in time, measured in transacted elements from writeBuffer, when to start reading back data into readBuffer</param>
        </member>
    </members>
</doc>
